//Time Complexity : O(n)

class Solution {
    public int maxSubArray(int[] nums) {
        int currentSum = nums[0], result = nums[0];
        for(int i = 1; i < nums.length; i++){
            currentSum += nums[i];
            currentSum = Math.max(currentSum, nums[i]);
            result = Math.max(currentSum, result);
        }
        return result;
    }
}


//Kadaneâ€™s algorithm

int size = a.length;
int max_so_far = Integer.MIN_VALUE, max_ending_here = 0;
 
for (int i = 0; i < size; i++)
{
    max_ending_here = max_ending_here + a[i];
    if (max_so_far < max_ending_here)
        max_so_far = max_ending_here;
    if (max_ending_here < 0)
        max_ending_here = 0;
}
return max_so_far;


//Below approach is similar to like find max from sums till now. Need to set sum to zero if less than zero.

class Solution {
    public int maxSubArray(int[] nums) {
        if(nums.length<2)
            return nums[0];
        int max = nums[0],sum = 0;
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
            if(sum>max)
                max = sum;
            if(sum<0)
                sum = 0;
        }
        return max;
    }
}
