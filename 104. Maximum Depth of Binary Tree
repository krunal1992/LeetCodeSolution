
//Recursive Approach

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}

//Iterative approach - using queue


public int maxDepth(TreeNode root) {
        int depth = 0;
        Queue<TreeNode> queue = new LinkedList<>();
        
        if(root == null){
            return depth;
        }
        
        queue.offer(root);
        
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int index = 0; index<size; index++){
                TreeNode node = queue.poll();
                if(node.left != null){
                    queue.offer(node.left);
                }
                if(node.right != null){
                    queue.offer(node.right);
                }
            }
            depth += 1;
        }
        
        return depth;
    }
