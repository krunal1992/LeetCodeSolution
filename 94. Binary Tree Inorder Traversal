
//Simple recursive approach 

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        return inorder(root, new ArrayList<Integer>());
    }
    
    public List<Integer> inorder(TreeNode root, List<Integer> listRes){
        if(root==null){
            return listRes;
        }
        if(root.left != null){
            listRes = inorder(root.left, listRes);
        }
        listRes.add(root.val);
        if(root.right != null){
            listRes = inorder(root.right, listRes);
        }
        return listRes;
    }
}

//Morris Traversal
//T/S - O(N)/O(1)
//Approach is first check if root have left node
//if found - go deep until get right child 
//update pointer from right to root if not cycle
//if cycle remove cycle and add root to result array
//traverse the right child
//if not found left - add current node to result array and traverse the right child
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> nodes= new ArrayList<>();
        TreeNode current = root;
        
        while(current != null){
            if(current.left != null){
                TreeNode pre = current.left;
                while(pre.right != null && pre.right != current){
                    pre = pre.right;
                }
                if(pre.right == null){
                    pre.right = current;
                    current = current.left;
                }else{
                    pre.right = null;
                    nodes.add(current.val);
                    current = current.right;
                }
            }else{
                nodes.add(current.val);
                current = current.right;
            }
        }
        
        return nodes;
    }
}
