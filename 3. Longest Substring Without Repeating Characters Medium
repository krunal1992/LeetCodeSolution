
//Naive approach. - T/S - 
//Efficient approach. - T/S - O(N)/O(1)
//Sliding window protocol. 
//Loop through the string add the character to the set
if the set contains the input character
* --> go ahead and remove the left character from the set and increment the left pointer to shrink the window
* --> Retain the max between the max and window length


Method : 1


class Solution {
    public int lengthOfLongestSubstring(String s) {
        int left=0;
        int res=0;
        HashSet<Character> map=new HashSet<Character>();
        for(int right=0;right<s.length();right++){
            while(map.contains(s.charAt(right))){
                map.remove(s.charAt(left));
                left++;
            }
            map.add(s.charAt(right));
            res=Math.max(res, right-left+1);
        }
        return res;
    }
}
