
//T/S - O(N)/O(N)
//Use queue to store the nodes. For identify single level nodes use length of the queue.

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue= new LinkedList<TreeNode>();
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        if(root == null){
            return res;
        }
        
        queue.offer(root);
        
        while(!queue.isEmpty()){
            List<Integer> subRes = new ArrayList<>();
            int level = queue.size();
            for(int index=0;index<level;index++){
                TreeNode node = queue.poll();
                subRes.add(node.val);

                if(node.left != null){
                    queue.offer(node.left);
                }
                if(node.right != null){
                    queue.offer(node.right);
                }
            }
            res.add(subRes);
        }

        return res;
    }
}



//Recursive approach - Here using actual result array to identify the level of the tree.


class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        levelOrderRec(root, 0, result);
        return result;
    }   
    
    void levelOrderRec(TreeNode root, int level, List<List<Integer>> result){
        if(root == null){
            return;
        }
        if(level == result.size()){
            result.add(new ArrayList<Integer>());
        }
        result.get(level).add(root.val);
        levelOrderRec(root.left, level + 1, result);
        levelOrderRec(root.right, level + 1, result);
    }
}

