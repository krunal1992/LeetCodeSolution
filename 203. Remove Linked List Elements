Method 1 : (2-3 ms solution)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode result=new ListNode(-1);
        ListNode newHead=result;
        
        while(head!=null){
            if(head.val != val){
                result.next = new ListNode(head.val);
                result = result.next;
            }
            head = head.next;
        }
        
        return newHead.next;
    }
}


Method : 2

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        if(head==null){
            return head;
        }
        
        ListNode tracer=head;
        ListNode prev=head;
        
        while(tracer!=null){
            if(tracer.val==val){
                prev.next=tracer.next;
                tracer=tracer.next;
                continue;
            }
            prev=tracer;
            tracer=tracer.next;
        }
        if(head.val==val){
            return head.next;
        }
        return head;
    }
}
