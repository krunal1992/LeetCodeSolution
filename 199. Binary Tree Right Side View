
//2 Approaches
//1 : go with the level order traversal - add last node from the level node listing to the result array
//2 : go with the reverse order level traversal  - efficient approach in terms of the storage...


class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        
        if(root == null){
            return result;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while(!queue.isEmpty()){
            int level = queue.size();
            
            for(int index=0;index<level;index++){
                TreeNode node = queue.poll();
                if(index == 0){
                    result.add(node.val);
                }
                if(node.right != null){
                    queue.offer(node.right);
                }
                if(node.left != null){
                    queue.offer(node.left);
                }
            }
        }
        
        return result;
    }
}
