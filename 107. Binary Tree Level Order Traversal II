
//Similar question with question 102 - need to only change one line //res.add(0, subRes);
//Approach is to add the result at the index 0 every time...



class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
         Queue<TreeNode> queue= new LinkedList<TreeNode>();
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        if(root == null){
            return res;
        }
        
        queue.offer(root);
        
        while(!queue.isEmpty()){
            List<Integer> subRes = new ArrayList<>();
            int level = queue.size();
            for(int index=0;index<level;index++){
                TreeNode node = queue.poll();
                subRes.add(node.val);

                if(node.left != null){
                    queue.offer(node.left);
                }
                if(node.right != null){
                    queue.offer(node.right);
                }
            }
            res.add(0, subRes);
        }

        return res;
    }
}




class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<>();
        compute(ans,root,0);
        return ans;
    }
    
    public void compute(List<List<Integer>> ans,TreeNode curr,int level)
    {
        if(curr==null) return;
        
        if(ans.size()==level) 
            ans.add(0,new ArrayList<Integer>());
        
        ans.get(ans.size()-level-1).add(curr.val);
        
        compute(ans,curr.left,level+1);
        compute(ans,curr.right,level+1);
    }
}

