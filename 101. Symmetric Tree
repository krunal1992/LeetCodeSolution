

//Recursive Solution


class Solution {
    public boolean isSymmetric(TreeNode root) {
        return root != null && isSym(root.left, root.right);
    }

    public boolean isSym(TreeNode left, TreeNode right){
        if(left == null || right == null){
            return left==right;
        }
        if(left.val != right.val){
            return false;
        }else{
            return isSym(left.left, right.right) && isSym(left.right, right.left);
        }
    }
}

//Iterative Solution - Using Queue


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> nodes = new LinkedList<>();
        
        nodes.add(root.left);
        nodes.add(root.right);

        while(!nodes.isEmpty()){
            TreeNode left = nodes.poll();
            TreeNode right = nodes.poll();
            
            if(left == null && right == null){
                continue;
            }
            
            if(left == null || right == null || left.val != right.val){
                return false;
            }
            
            nodes.add(left.left);
            nodes.add(right.right);
            
            nodes.add(left.right);
            nodes.add(right.left);
        }
        
        return true;
    }
}
