
//T/S : O(N)/O(N)
//Using hashmap to store all elements of arrays

class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> map= new HashSet<Integer>();
        
        for(int num : nums){
            map.add(num);
        }

        int longestRes = 0;
        
        for(int num : map){
            if(!map.contains(num - 1)){
                int currentNum = num;
                int currentRes = 1;
                
                while(map.contains(currentNum + 1)){
                    currentNum += 1;
                    currentRes += 1;
                }
                
                longestRes = Math.max(currentRes, longestRes);
            }
        }

        return longestRes;
    }
}


//N(logN)
//Using sorting....

class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length==0) return 0;
        if(nums.length==1) return 1;
        Arrays.sort(nums);
        int c=1,max=1;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i+1]-nums[i]==1) c++;
            else if(nums[i+1]-nums[i]==0) continue;
            else c=1;
            max=Math.max(max,c);
        }
        return max;
    }
}
