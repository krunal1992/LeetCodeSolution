Method:1 (Naive Approach)



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode result=null;
        if(lists.length<=0){
            return result;
        }
        result=lists[0];
        for(int index=1;index<lists.length;index++){
            result=mergeSortedList(result, lists[index]);
        }
        return result;
    }
    
    ListNode mergeListNodeSortedList(ListNode first, ListNode second){
        ListNode result=new ListNode(-1);
        ListNode head=result;
        
        while(first!=null && second!=null){
            if(first.val<=second.val){
                result.next=first;
                first=first.next;
            }else{
                result.next=second;
                second=second.next;
            }
            result=result.next;
        }
        if(first!=null){
            result.next=first;
            first=first.next;
            result=result.next;
        }
        if(second!=null){
            result.next=second;
            second=second.next;
            result=result.next;
        }
        return head.next;
    }
}


Method:2

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length<=0){
            return null;
        }
        return recursionSol(lists, 0, lists.length-1);
    }
    
    ListNode recursionSol(ListNode[] lists, int low, int high){
        if(high==low){
            return lists[low];
        }
        if(high-low==1){
            return mergeListNode(lists[low],lists[high]);
        }
         
        int mid=low + (high-low)/2;
        ListNode result1=recursionSol(lists, low, mid);
        ListNode result2=recursionSol(lists, mid+1, high);
        return mergeListNode(result1, result2);
    }
    
    ListNode mergeListNode(ListNode first, ListNode second){
        ListNode result=new ListNode(-1);
        ListNode head=result;
        
        while(first!=null && second!=null){
            if(first.val<=second.val){
                result.next=first;
                first=first.next;
            }else{
                result.next=second;
                second=second.next;
            }
            result=result.next;
        }
        if(first!=null){
            result.next=first;
            first=first.next;
            result=result.next;
        }
        if(second!=null){
            result.next=second;
            second=second.next;
            result=result.next;
        }
        return head.next;
    }
}


Method : 3


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>((n1, n2) -> n1.val - n2.val);
        
        for(ListNode node : lists){
            if(node != null){
                queue.add(node);
            }
        }
        
        ListNode head = null, tail = null;
        while(!queue.isEmpty()){
            ListNode temp = queue.poll();
            if(head==null){
                head = tail = temp;
            }else{
                tail.next = temp;
                tail = tail.next;
            }
            if(temp.next != null){
                queue.add(tail.next);
            }
        }
        return head;
    }
}
