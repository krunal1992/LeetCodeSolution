

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] shortArray = nums1;
	int[] longArray = nums2;
    if (nums1.length > nums2.length) {
        shortArray = nums2;
        longArray = nums1;
    }
	
	int shortLen = shortArray.length;
    int longLen = longArray.length;
    int half = (shortLen + longLen) / 2;

    int start = 0, end = shortLen - 1;
    while (true) {
        // binary search the shorter array
        int i = (end < 0) ? end : (start + end) / 2;
        int j = half - i - 2;

		int shortLeft = (i >= 0) ? shortArray[i] : Integer.MIN_VALUE;
        int shortRight = (i+1 < shortLen) ? shortArray[i+1]: Integer.MAX_VALUE;
        int longLeft = (j >= 0) ? longArray[j] : Integer.MIN_VALUE;
        int longRight = (j+1 < longLen) ? longArray[j+1] : Integer.MAX_VALUE;

        // partition is right
        if (shortLeft <= longRight && longLeft <= shortRight) {
            if ((shortLen + longLen) % 2 != 0) { //odd
                return Math.min(shortRight, longRight);
            } else { //even
                return (double)(Math.max(shortLeft, longLeft) + Math.min(shortRight, longRight)) / 2;
            }
        } else if (shortLeft > longRight) { // the median value of shorter array is too big
            end = i - 1; // move to the left part
        } else if (longLeft > shortRight) { // the value of longer array is too big
            start = i + 1; // move to the right part
        }
    }
    }
}
