1. Brute:
Simply sort the array .
time Complexity: nlog(n)

2. A better approach can be to count number of 0's , 1's and 2's in the array in a single pass and then filling the array using the obtained 
counts in another pass. loop through and put 0's at the first cout(0) positions and so on for 1's and 2's.)

time Complexity: O(n)

3. The optimal approach is to use dutch national flag algorithm. (single pass)

class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int medium = 0;
        int high = nums.length-1;
        
        
        while(low<=high){
            if(nums[low]==0){
                swapNumber(nums, low, medium);
                low++;
                medium++;
            }else if(nums[low]==1){
                low++;
            }else{
                swapNumber(nums, low, high);
                high--;
            }
        }
    }
    
    void swapNumber(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }    
}

time Complexity: O(n)
