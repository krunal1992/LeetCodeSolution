//Naive approach. - T/S - O(N^2)/O(1)
//Efficient approach. - T/S - O(N)/O(N)
//Use Hashmap to store previously encounter element and check if [target - current element] is found in map or not.


class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i<nums.length;i++){
            int mapIndex = target - nums[i];
            if(!map.containsKey(mapIndex)){
                map.put(nums[i], i);
            }else{
                return new int[] {i, map.get(mapIndex)};
            }
        }
        return new int[]{};
    }
}
