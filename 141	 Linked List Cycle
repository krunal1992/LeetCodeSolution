/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        //O(n) O(n)
        // HashSet<ListNode> map = new HashSet<ListNode>();
        // while(head != null){
        //     if(map.contains(head)){
        //         return true;
        //     }
        //     map.add(head);
        //     head = head.next;
        // }
        // return false;
        
        //Floydâ€™s Cycle-Finding Algorithm 
        
        ListNode slowPointer = head;
        ListNode fastPointer = head;
        
        while(slowPointer != null && fastPointer != null && fastPointer.next != null){
            slowPointer = slowPointer.next;
            fastPointer = fastPointer.next.next;
            if(slowPointer == fastPointer){
                return true;
            }
        }
        return false;
    }
}
